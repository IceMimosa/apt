package io.patamon.apt.processor;

import io.patamon.apt.annotation.TestJavaSource;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.TypeElement;
import javax.tools.JavaFileObject;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Set;

/**
 * Desc: {@link TestJavaSource} 的processor
 *  当前processor的注册方式为:
 *      * 在resources/META-INF/services/javax.annotation.processing.Processor 文件中进行服务注册
 *      * 后续会采用谷歌的auto-service: https://github.com/google/auto
 *
 * Mail: chk19940609@gmail.com
 * Created by IceMimosa
 * Date: 2018/1/30
 */
@SupportedAnnotationTypes({"io.patamon.apt.annotation.TestJavaSource"})
@SupportedSourceVersion(SourceVersion.RELEASE_8)
public class TestJavaSourceProcessor extends AbstractProcessor {

    private Filer filer;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        this.filer = processingEnv.getFiler();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        for (TypeElement element : annotations) {
            roundEnv.getElementsAnnotatedWith(element).forEach(it -> {
                generateFile("io.patamon.apt.TestJavaSourceGenerate");
            });
        }
        return false;
    }

    /**
     * 生成java文件
     */
    private void generateFile(String path) {
        BufferedWriter writer = null;
        try {
            // 1. 创建java源文件
            JavaFileObject sourceFile = filer.createSourceFile(path);
            int period = path.lastIndexOf('.');
            String myPackage = period > 0 ? path.substring(0, period) : null;
            String clazz = path.substring(period + 1);
            // 2. 写入代码
            writer = new BufferedWriter(sourceFile.openWriter());
            if (myPackage != null) {
                writer.write("package " + myPackage + ";\n\n");
            }
            writer.write("import java.util.ArrayList;\n");
            writer.write("import java.util.List;\n\n");
            writer.write("/** This class is generated by CustomProcessor, do not edit. */\n");
            writer.write("public class " + clazz + " {\n");
            writer.write("    private static final List<String> TEST;\n\n");
            writer.write("    static {\n");
            writer.write("        TEST = new ArrayList<>();\n\n");
            writer.write("        TEST.add(\"" + 1 + "\");\n");
            writer.write("        TEST.add(\"" + 2 + "\");\n");
            writer.write("    }\n\n");
            writer.write("    public static List<String> getTest() {\n");
            writer.write("        return TEST;\n");
            writer.write("    }\n\n");
            writer.write("}\n");
        } catch (IOException e) {
            throw new RuntimeException("Could not write source for " + path, e);
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    //Silent
                }
            }
        }
    }
}
